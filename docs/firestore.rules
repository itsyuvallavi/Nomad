rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }
    
    function isValidTravelStyle(style) {
      return style in ['budget', 'mid-range', 'luxury'];
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt', 'lastLoginAt', 'preferences', 'stats'])
        && isValidEmail(request.resource.data.email)
        && request.resource.data.displayName is string
        && request.resource.data.displayName.size() > 0
        && request.resource.data.preferences.keys().hasAll(['travelStyle', 'interests', 'preferredLanguage', 'currency', 'defaultTripLength'])
        && isValidTravelStyle(request.resource.data.preferences.travelStyle)
        && request.resource.data.preferences.interests is list
        && request.resource.data.preferences.preferredLanguage is string
        && request.resource.data.preferences.currency is string
        && request.resource.data.preferences.defaultTripLength is int
        && request.resource.data.preferences.defaultTripLength > 0
        && request.resource.data.stats.keys().hasAll(['totalTripsPlanned', 'favoriteDestinations'])
        && request.resource.data.stats.totalTripsPlanned is int
        && request.resource.data.stats.favoriteDestinations is list;
      
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.uid == resource.data.uid
        && request.resource.data.email == resource.data.email
        && request.resource.data.createdAt == resource.data.createdAt;
    }
    
    // Trips collection - users can only access their own trips
    match /trips/{tripId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      
      allow create: if isAuthenticated() 
        && isOwner(request.resource.data.userId)
        && request.resource.data.keys().hasAll(['userId', 'title', 'destination', 'startDate', 'endDate', 'duration', 'currency', 'travelStyle', 'status', 'createdAt', 'updatedAt'])
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.destination is string
        && request.resource.data.destination.size() > 0
        && request.resource.data.duration is int
        && request.resource.data.duration > 0
        && request.resource.data.currency is string
        && isValidTravelStyle(request.resource.data.travelStyle)
        && request.resource.data.status in ['draft', 'confirmed', 'completed', 'cancelled'];
    }
    
    // Favorites collection - users can only access their own favorites
    match /favorites/{favoriteId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      
      allow create: if isAuthenticated() 
        && isOwner(request.resource.data.userId)
        && request.resource.data.keys().hasAll(['userId', 'type', 'itemId', 'title', 'createdAt'])
        && request.resource.data.type in ['destination', 'trip', 'activity', 'restaurant', 'hotel']
        && request.resource.data.itemId is string
        && request.resource.data.itemId.size() > 0
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0;
    }
    
    // Trip history collection - users can only access their own history
    match /trip-history/{tripId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      
      allow create: if isAuthenticated() 
        && isOwner(request.resource.data.userId)
        && request.resource.data.keys().hasAll(['tripId', 'userId', 'originalPrompt', 'refinements', 'createdAt'])
        && request.resource.data.tripId is string
        && request.resource.data.originalPrompt is string
        && request.resource.data.originalPrompt.size() > 0
        && request.resource.data.refinements is list;
    }
    
    // Analytics collection - read-only for authenticated users, write for admins only
    match /analytics/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side writes allowed
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}