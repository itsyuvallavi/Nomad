// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a personalized day-by-day itinerary based on user preferences.
 *
 * - generatePersonalizedItinerary - A function that generates the itinerary.
 * - GeneratePersonalizedItineraryInput - The input type for the generatePersonalizedItinerary function.
 * - GeneratePersonalizedItineraryOutput - The return type for the generatePersonalizedItinerary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePersonalizedItineraryInputSchema = z.object({
  destination: z.string().describe('The destination for the itinerary.'),
  travelDates: z.string().describe('The travel dates for the itinerary.'),
  workRequirements: z
    .string()
    .describe('The work requirements during the trip.'),
  visaStatus: z.string().describe('The visa status for the destination.'),
  budget: z.string().describe('The budget for the trip.'),
  lifestylePreferences: z
    .string()
    .describe('The lifestyle preferences for the trip.'),
});

export type GeneratePersonalizedItineraryInput = z.infer<
  typeof GeneratePersonalizedItineraryInputSchema
>;

const ActivitySchema = z.object({
  time: z.string().describe('The time of the activity (e.g., "9:00 AM", "Afternoon").'),
  description: z.string().describe('A description of the activity.'),
  category: z.enum(['Work', 'Leisure', 'Food', 'Travel', 'Accommodation']).describe('The category of the activity.'),
});

const DailyItinerarySchema = z.object({
  day: z.number().describe('The day number of the itinerary (e.g., 1).'),
  date: z.string().describe('The date of the itinerary day in YYYY-MM-DD format.'),
  title: z.string().describe('A title for the day (e.g., "Arrival and Settling In").'),
  activities: z.array(ActivitySchema).describe('A list of activities for the day.'),
});


const GeneratePersonalizedItineraryOutputSchema = z.object({
  itinerary: z.array(DailyItinerarySchema).describe('The generated day-by-day itinerary.'),
});

export type GeneratePersonalizedItineraryOutput = z.infer<
  typeof GeneratePersonalizedItineraryOutputSchema
>;

export async function generatePersonalizedItinerary(
  input: GeneratePersonalizedItineraryInput
): Promise<GeneratePersonalizedItineraryOutput> {
  return generatePersonalizedItineraryFlow(input);
}

const decideOnEventOrLocation = ai.defineTool(
  {
    name: 'decideOnEventOrLocation',
    description:
      'Decides whether to incorporate a particular event or location into the itinerary based on user preferences.',
    inputSchema: z.object({
      eventOrLocation: z
        .string()
        .describe('The event or location to consider.'),
      userPreferences: z
        .string()
        .describe('The userâ€™s lifestyle preferences and interests.'),
    }),
    outputSchema: z.boolean(),
  },
  async (input) => {
    // A real implementation would compare the event/location to user preferences.
    // For now, we'll just include everything.
    return true;
  }
);

const prompt = ai.definePrompt({
  name: 'generatePersonalizedItineraryPrompt',
  input: {schema: GeneratePersonalizedItineraryInputSchema},
  output: {schema: GeneratePersonalizedItineraryOutputSchema},
  tools: [decideOnEventOrLocation],
  prompt: `You are a travel agent specializing in creating personalized itineraries for nomad travelers. Your response must be a detailed day-by-day itinerary in a structured JSON format.

  Based on the following information, generate a detailed day-by-day itinerary:
  Destination: {{{destination}}}
  Travel Dates: {{{travelDates}}}
  Work Requirements: {{{workRequirements}}}
  Visa Status: {{{visaStatus}}}
  Budget: {{{budget}}}
  Lifestyle Preferences: {{{lifestylePreferences}}}

  Today's date is ${new Date().toLocaleDateString()}. Make sure the dates in the itinerary are correct based on the user's travel dates.

  Incorporate coworking spaces, cafes with reliable WiFi, and local nomad community events into the itinerary. Use the decideOnEventOrLocation tool to determine whether a given event or location aligns with the user's preferences.

  For each activity, provide a time, a description, and a category from the available options ('Work', 'Leisure', 'Food', 'Travel', 'Accommodation'). Ensure every day has a clear title, date, and a list of activities.
  `,
});

const generatePersonalizedItineraryFlow = ai.defineFlow(
  {
    name: 'generatePersonalizedItineraryFlow',
    inputSchema: GeneratePersonalizedItineraryInputSchema,
    outputSchema: GeneratePersonalizedItineraryOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    
    if (!output) {
      return { itinerary: [] };
    }
    
    return output;
  }
);
