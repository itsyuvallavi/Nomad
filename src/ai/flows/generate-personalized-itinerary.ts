// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a personalized day-by-day itinerary based on user preferences.
 *
 * - generatePersonalizedItinerary - A function that generates the itinerary.
 * - GeneratePersonalizedItineraryInput - The input type for the generatePersonalizedItinerary function.
 * - GeneratePersonalizedItineraryOutput - The return type for the generatePersonalizedItinerary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { GeneratePersonalizedItineraryOutputSchema } from '@/ai/schemas';
import type { GeneratePersonalizedItineraryOutput } from '@/ai/schemas';

const GeneratePersonalizedItineraryInputSchema = z.object({
  prompt: z
    .string()
    .describe('A natural language prompt describing the desired trip.'),
  attachedFile: z
    .string()
    .optional()
    .describe(
      "A file attached by the user as a data URI. Can be a document or an image. Format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});

export type GeneratePersonalizedItineraryInput = z.infer<
  typeof GeneratePersonalizedItineraryInputSchema
>;

export async function generatePersonalizedItinerary(
  input: GeneratePersonalizedItineraryInput
): Promise<GeneratePersonalizedItineraryOutput> {
  return generatePersonalizedItineraryFlow(input);
}

const decideOnEventOrLocation = ai.defineTool(
  {
    name: 'decideOnEventOrLocation',
    description:
      'Decides whether to incorporate a particular event or location into the itinerary based on user preferences.',
    inputSchema: z.object({
      eventOrLocation: z
        .string()
        .describe('The event or location to consider.'),
      userPreferences: z
        .string()
        .describe('The user’s lifestyle preferences and interests.'),
    }),
    outputSchema: z.boolean(),
  },
  async (input) => {
    // A real implementation would compare the event/location to user preferences.
    // For now, we'll just include everything.
    return true;
  }
);

const getWeatherForecast = ai.defineTool(
    {
        name: 'getWeatherForecast',
        description: 'Gets the weather forecast for a specific location and date.',
        inputSchema: z.object({
            location: z.string().describe('The location to get the weather for (e.g., "Lisbon, Portugal").'),
            date: z.string().describe('The date for the forecast in YYYY-MM-DD format.'),
        }),
        outputSchema: z.object({
            forecast: z.string().describe('A description of the weather (e.g., "Sunny with a high of 25°C").')
        }),
    },
    async (input) => {
        // This is a mock implementation. In a real app, you would call a weather API.
        return { forecast: "Sunny and pleasant, 22°C" };
    }
);


const prompt = ai.definePrompt({
  name: 'generatePersonalizedItineraryPrompt',
  input: {schema: GeneratePersonalizedItineraryInputSchema},
  output: {schema: GeneratePersonalizedItineraryOutputSchema},
  tools: [decideOnEventOrLocation, getWeatherForecast],
  prompt: `You are a master travel agent specializing in creating personalized itineraries for nomad travelers. Your response must be a detailed day-by-day itinerary in a structured JSON format.

  Analyze the user's prompt to extract:
  - Trip duration and dates
  - Destination(s) 
  - Origin/departure location
  - Any specific preferences mentioned

  User's request: {{{prompt}}}

  **SMART DEFAULTS TO USE (unless user specifies otherwise):**
  - **Budget:** Moderate budget of $150-200 per day per person (covers accommodation, meals, activities, and local transport)
  - **Accommodation:** Mid-range hotels or quality Airbnbs ($60-100/night)
  - **Activities:** Mix of:
    • Popular tourist highlights (must-see landmarks)
    • Local cultural experiences (markets, neighborhoods)
    • Food experiences (local restaurants, cafes, food tours)
    • Some free/low-cost activities (parks, walking tours, viewpoints)
  - **Travel Style:** Balanced comfort and adventure (not too rushed, 2-3 main activities per day)
  - **Meals:** Mix of local restaurants (breakfast $10-15, lunch $15-25, dinner $25-40)

  **CRITICAL RULES:**
  1.  **Handle Multiple Destinations:** If the user requests multiple destinations, create a continuous itinerary covering all locations.
  2.  **Select Specific Places:** Choose real, specific locations for ALL activities with actual addresses. No generic placeholders.
  3.  **Smart Budget Application:** Apply the moderate budget default intelligently - adjust based on destination cost of living.
  4.  **Digital Nomad Friendly:** Include cafes with good WiFi, coworking spaces (1-2 per trip), and productive work spots.
  5.  **Use Tools:** Use getWeatherForecast for weather-appropriate activities. Use decideOnEventOrLocation for preference alignment.
  6.  **First Day Setup:** Day 1 should start with accommodation check-in, followed by area orientation and a light schedule.
  7.  **Origin Consideration:** Consider the origin location for jet lag and travel fatigue on Day 1.

  {{#if attachedFile}}
  The user has also attached a file for reference. Use this to inform the itinerary.
  Attached file: {{media url=attachedFile}}
  {{/if}}

  **OUTPUT REQUIREMENTS:**
  - Keep activity descriptions concise (1-2 sentences max)
  - Include practical details (opening hours, costs, booking needs)
  - Add 3-5 relevant quick tips for the destination
  - Ensure dates align with user's travel dates
  - Balance the itinerary: don't overschedule, allow for flexibility

  The final output must include 'destination', 'title', 'itinerary', and 'quickTips'.
  `,
});

const generatePersonalizedItineraryFlow = ai.defineFlow(
  {
    name: 'generatePersonalizedItineraryFlow',
    inputSchema: GeneratePersonalizedItineraryInputSchema,
    outputSchema: GeneratePersonalizedItineraryOutputSchema,
  },
  async (input) => {
    console.log('Generating itinerary for input:', input.prompt);
    const {output, usage} = await prompt(input);

    console.log('LLM Usage:', usage);
    console.log('Raw LLM Output:', JSON.stringify(output, null, 2));
    
    if (!output || !output.itinerary) {
      console.error('Failed to generate a valid itinerary structure.');
      // If the model fails, try to return a graceful empty state
      // or a message indicating failure.
      // Returning a valid, empty structure is often better than null/undefined.
      return { destination: 'Unknown', title: 'Trip', itinerary: [], quickTips: [] };
    }
    
    return output;
  }
);
