// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a personalized day-by-day itinerary based on user preferences.
 *
 * - generatePersonalizedItinerary - A function that generates the itinerary.
 * - GeneratePersonalizedItineraryInput - The input type for the generatePersonalizedItinerary function.
 * - GeneratePersonalizedItineraryOutput - The return type for the generatePersonalizedItinerary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { GeneratePersonalizedItineraryOutputSchema } from '@/ai/schemas';
import type { GeneratePersonalizedItineraryOutput } from '@/ai/schemas';

const GeneratePersonalizedItineraryInputSchema = z.object({
  prompt: z
    .string()
    .describe('A natural language prompt describing the desired trip.'),
  attachedFile: z
    .string()
    .optional()
    .describe(
      "A file attached by the user as a data URI. Can be a document or an image. Format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});

export type GeneratePersonalizedItineraryInput = z.infer<
  typeof GeneratePersonalizedItineraryInputSchema
>;

export async function generatePersonalizedItinerary(
  input: GeneratePersonalizedItineraryInput
): Promise<GeneratePersonalizedItineraryOutput> {
  return generatePersonalizedItineraryFlow(input);
}

const decideOnEventOrLocation = ai.defineTool(
  {
    name: 'decideOnEventOrLocation',
    description:
      'Decides whether to incorporate a particular event or location into the itinerary based on user preferences.',
    inputSchema: z.object({
      eventOrLocation: z
        .string()
        .describe('The event or location to consider.'),
      userPreferences: z
        .string()
        .describe('The user’s lifestyle preferences and interests.'),
    }),
    outputSchema: z.boolean(),
  },
  async (input) => {
    // A real implementation would compare the event/location to user preferences.
    // For now, we'll just include everything.
    return true;
  }
);

const getWeatherForecast = ai.defineTool(
    {
        name: 'getWeatherForecast',
        description: 'Gets the weather forecast for a specific location and date.',
        inputSchema: z.object({
            location: z.string().describe('The location to get the weather for (e.g., "Lisbon, Portugal").'),
            date: z.string().describe('The date for the forecast in YYYY-MM-DD format.'),
        }),
        outputSchema: z.object({
            forecast: z.string().describe('A description of the weather (e.g., "Sunny with a high of 25°C").')
        }),
    },
    async (input) => {
        // This is a mock implementation. In a real app, you would call a weather API.
        return { forecast: "Sunny and pleasant, 22°C" };
    }
);


const prompt = ai.definePrompt({
  name: 'generatePersonalizedItineraryPrompt',
  input: {schema: GeneratePersonalizedItineraryInputSchema},
  output: {schema: GeneratePersonalizedItineraryOutputSchema},
  tools: [decideOnEventOrLocation, getWeatherForecast],
  prompt: `You are a master travel agent specializing in creating personalized itineraries for nomad travelers. Your response must be a detailed day-by-day itinerary in a structured JSON format.

  Analyze the user's prompt to determine the destination(s), travel dates, work requirements, visa status, budget, and lifestyle preferences.

  User's request: {{{prompt}}}

  **CRITICAL RULES:**
  1.  **Handle Multiple Destinations:** If the user requests a trip to multiple destinations (e.g., "one week in Lisbon and one week in Porto"), you MUST create a single, continuous itinerary that covers all requested locations. The 'destination' field in the output should reflect this (e.g., "Lisbon & Porto, Portugal").
  2.  **Select Specific Places:** You MUST choose real, specific locations for ALL activities. This includes a hotel for the stay, coworking spaces, restaurants, and points of interest. Provide a full, real address for each location. Do not use generic placeholders.
  3.  **Default Budget:** If the user does NOT specify a budget, you MUST assume a total daily budget of $500. This budget must cover everything for the day: the hotel, three meals, transportation, and all activities. You are responsible for selecting places that fit within this budget.
  4.  **Use Tools:** You MUST use the getWeatherForecast tool to check the weather for each day of the trip and plan activities accordingly (e.g., indoor activities for rainy days). Use the decideOnEventOrLocation tool to determine if a potential activity aligns with the user's preferences.
  5.  **Minimal Text:** Keep all descriptions for activities and quick tips extremely short and to the point.
  6.  **Hotel First:** The first activity for Day 1 should always be "Accommodation" and should be the check-in at the selected hotel.

  {{#if attachedFile}}
  The user has also attached a file for reference. Use the information in this file to inform the itinerary.
  Attached file: {{media url=attachedFile}}
  {{/if}}

  Make sure the dates in the itinerary are correct based on the user's travel dates.

  Incorporate coworking spaces, cafes with reliable WiFi, and local nomad community events into the itinerary.

  For each activity, provide a time, a description, a category, a specific physical address, and an estimated travel time from the previous activity. Do not mention flights. The travel should be between locations within the destination city.

  The final output must include a 'destination' (e.g., "Lisbon, Portugal"), a 'title' for the trip, the 'itinerary' itself, and a list of 'quickTips'.

  Ensure every day has a clear title, date, and a list of activities.
  `,
});

const generatePersonalizedItineraryFlow = ai.defineFlow(
  {
    name: 'generatePersonalizedItineraryFlow',
    inputSchema: GeneratePersonalizedItineraryInputSchema,
    outputSchema: GeneratePersonalizedItineraryOutputSchema,
  },
  async (input) => {
    console.log('Generating itinerary for input:', input.prompt);
    const {output, usage} = await prompt(input);

    console.log('LLM Usage:', usage);
    console.log('Raw LLM Output:', JSON.stringify(output, null, 2));
    
    if (!output || !output.itinerary) {
      console.error('Failed to generate a valid itinerary structure.');
      // If the model fails, try to return a graceful empty state
      // or a message indicating failure.
      // Returning a valid, empty structure is often better than null/undefined.
      return { destination: 'Unknown', title: 'Trip', itinerary: [], quickTips: [] };
    }
    
    return output;
  }
);
