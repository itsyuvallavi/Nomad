// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes an initial user prompt to determine what information is missing for trip planning.
 *
 * - analyzeInitialPrompt - A function that analyzes the prompt and returns clarifying questions.
 * - AnalyzeInitialPromptInput - The input type for the analyzeInitialPrompt function.
 * - AnalyzeInitialPromptOutput - The return type for the analyzeInitialPrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeInitialPromptInputSchema = z.object({
  prompt: z
    .string()
    .describe('A natural language prompt describing the desired trip.'),
  attachedFile: z
    .string()
    .optional()
    .describe(
      "A file attached by the user as a data URI. Can be a document or an image. Format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});

export type AnalyzeInitialPromptInput = z.infer<
  typeof AnalyzeInitialPromptInputSchema
>;

const AnalyzeInitialPromptOutputSchema = z.object({
    questions: z.array(z.string()).describe("A list of questions to ask the user to gather the necessary information for planning their trip.")
});

export type AnalyzeInitialPromptOutput = z.infer<typeof AnalyzeInitialPromptOutputSchema>;


export async function analyzeInitialPrompt(
  input: AnalyzeInitialPromptInput
): Promise<AnalyzeInitialPromptOutput> {
  return analyzeInitialPromptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeInitialPrompt',
  input: {schema: AnalyzeInitialPromptInputSchema},
  output: {schema: AnalyzeInitialPromptOutputSchema},
  prompt: `You are a helpful travel assistant. Your first job is to analyze a user's initial request and determine what ESSENTIAL information is missing.

  ESSENTIAL information needed (MUST ASK if missing):
  - Trip duration/length (e.g., "5 days", "2 weeks")
  - Travel dates (can be specific dates or flexible like "mid-January", "next month")
  - Destination (where they're going)
  - Origin/departure location (where they're traveling from)
  - How many of you will be traveling with? (How many people the trip is for)

  OPTIONAL information (DO NOT ASK - use defaults if not provided):
  - Budget: Default to moderate ($150-200/day per person)
  - Activities/interests: Default to mix of popular highlights, culture, food, and sights
  - Travel style: Default to balanced comfort/adventure
  - Accommodation: Default to mid-range hotels/Airbnbs
  - Currency Will be USD by default, unless specified otherwise.

  Analyze the user's request below and ONLY ask for the ESSENTIAL missing information. Keep questions minimal and conversational.

  User's request: {{{prompt}}}

  {{#if attachedFile}}
  The user has also attached a file for reference. You can use this to infer some details, but still ask for confirmation if anything is unclear.
  Attached file: {{media url=attachedFile}}
  {{/if}}

  CRITICAL RULES:
  1. ONLY ask for ESSENTIAL information that is missing (duration, dates, destination, origin)
  2. DO NOT ask about budget, activities, travel style, or accommodation unless the user specifically mentions wanting help with these
  3. If ALL essential information is provided, return an empty questions array
  4. Each question must be a non-empty string
  5. Keep questions brief and friendly - aim for 1-2 questions maximum
  6. If the user provides a vague duration like "a week" or "few days", that's sufficient - don't ask for exact numbers
  `,
});

const analyzeInitialPromptFlow = ai.defineFlow(
  {
    name: 'analyzeInitialPromptFlow',
    inputSchema: AnalyzeInitialPromptInputSchema,
    outputSchema: AnalyzeInitialPromptOutputSchema,
  },
  async (input) => {
    console.log('[AI Flow] Analyzing initial prompt:', input.prompt);
    const {output} = await prompt(input);
    
    if (!output) {
        console.log('[AI Flow] No output from AI, returning error question');
        return { questions: ["I'm sorry, I had trouble understanding your request. Could you please provide more details about your trip?"] };
    }
    
    // Filter out empty or whitespace-only questions
    const validQuestions = (output.questions || []).filter(
      q => q && typeof q === 'string' && q.trim().length > 0
    );
    
    console.log('[AI Flow] Generated questions:', validQuestions);
    return { questions: validQuestions };
  }
);
