// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes an initial user prompt to determine what information is missing for trip planning.
 *
 * - analyzeInitialPrompt - A function that analyzes the prompt and returns clarifying questions.
 * - AnalyzeInitialPromptInput - The input type for the analyzeInitialPrompt function.
 * - AnalyzeInitialPromptOutput - The return type for the analyzeInitialPrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeInitialPromptInputSchema = z.object({
  prompt: z
    .string()
    .describe('A natural language prompt describing the desired trip.'),
  attachedFile: z
    .string()
    .optional()
    .describe(
      "A file attached by the user as a data URI. Can be a document or an image. Format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});

export type AnalyzeInitialPromptInput = z.infer<
  typeof AnalyzeInitialPromptInputSchema
>;

const AnalyzeInitialPromptOutputSchema = z.object({
    questions: z.array(z.string()).describe("A list of questions to ask the user to gather the necessary information for planning their trip.")
});

export type AnalyzeInitialPromptOutput = z.infer<typeof AnalyzeInitialPromptOutputSchema>;


export async function analyzeInitialPrompt(
  input: AnalyzeInitialPromptInput
): Promise<AnalyzeInitialPromptOutput> {
  return analyzeInitialPromptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeInitialPrompt',
  input: {schema: AnalyzeInitialPromptInputSchema},
  output: {schema: AnalyzeInitialPromptOutputSchema},
  prompt: `You are a helpful travel assistant. Your first job is to analyze a user's initial request and determine what information is missing.

  You need to gather the following details to plan a trip:
  - Destination(s)
  - Budget
  - Travel Dates (start and end)
  - Travel style (e.g., business, pleasure, backpacking, luxury)
  - Key activities or interests (e.g., hiking, museums, nightlife)

  Analyze the user's request below and generate a list of questions to ask them to get the missing information. Frame the questions in a friendly, conversational way.

  User's request: {{{prompt}}}

  {{#if attachedFile}}
  The user has also attached a file for reference. You can use this to infer some details, but still ask for confirmation if anything is unclear.
  Attached file: {{media url=attachedFile}}
  {{/if}}

  CRITICAL RULES:
  1. Only ask for the information that is actually missing. If the user has already provided a detail, do not ask for it again.
  2. DO NOT ask for the currency. The default is USD unless the user specifies otherwise in their prompt.
  `,
});

const analyzeInitialPromptFlow = ai.defineFlow(
  {
    name: 'analyzeInitialPromptFlow',
    inputSchema: AnalyzeInitialPromptInputSchema,
    outputSchema: AnalyzeInitialPromptOutputSchema,
  },
  async (input) => {
    console.log('Analyzing initial prompt:', input.prompt);
    const {output} = await prompt(input);
    
    if (!output) {
        return { questions: ["I'm sorry, I had trouble understanding your request. Could you please provide more details about your trip?"] };
    }
    
    console.log('Generated questions:', output.questions);
    return output;
  }
);
